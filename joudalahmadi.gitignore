# TODO: import all necessary packages and functions


## Filenames
chicago = 'chicago.csv'
new_york_city = 'new_york_city.csv'
washington = 'washington.csv'


def get_city():
    '''Asks the user for a city and returns the filename for that city's bike share data.

    Args:
        none.
    Returns:
        (str) Filename for a city's bikeshare data.
    '''
    city = input('\nHello! Let\'s explore some US bikeshare data!\n'
                 'Would you like to see data for Chicago, New York, or Washington?\n')
    # TODO: handle raw input and complete function


def get_time_period():
    '''Asks the user for a time period and returns the specified filter.

    Args:
        none.
    Returns:
        TODO: fill out return type and description (see get_city for an example)
    '''
    time_period = input('\nWould you like to filter the data by month, day, or not at'
                        ' all? Type "none" for no time filter.\n')
    # TODO: handle raw input and complete function


def get_month():
    '''Asks the user for a month and returns the specified month.

    Args:
        none.
    Returns:
        TODO: fill out return type and description (see get_city for an example)
    '''
    month = input('\nWhich month? January, February, March, April, May, or June?\n')
    # TODO: handle raw input and complete function


def get_day(month):
    '''Asks the user for a day and returns the specified day.

    Args:
        none.
    Returns:
        TODO: fill out return type and description (see get_city for an example)
    '''
    day = input('\nWhich day? Please type your response as an integer.\n')
    # TODO: handle raw input and complete function


def popular_month(city_file, time_period):
    '''TODO: fill out docstring with description, arguments, and return values.
    Question: What is the most popular month for start time?
    '''
    # TODO: complete function


def popular_day(city_file, time_period):
    '''TODO: fill out docstring with description, arguments, and return values.
    Question: What is the most popular day of week (Monday, Tuesday, etc.) for start time?
    '''
    # TODO: complete function


def popular_hour(city_file, time_period):
    '''TODO: fill out docstring with description, arguments, and return values.
    Question: What is the most popular hour of day for start time?
    '''
    # TODO: complete function


def trip_duration(city_file, time_period):
    '''TODO: fill out docstring with description, arguments, and return values.
    Question: What is the total trip duration and average trip duration?
    '''
    # TODO: complete function


def popular_stations(city_file, time_period):
    '''TODO: fill out docstring with description, arguments, and return values.
    Question: What is the most popular start station and most popular end station?
    '''
    # TODO: complete function


def popular_trip(city_file, time_period):
    '''TODO: fill out docstring with description, arguments, and return values.
    Question: What is the most popular trip?
    '''
    # TODO: complete function


def users(city_file, time_period):
    '''TODO: fill out docstring with description, arguments, and return values.
    Question: What are the counts of each user type?
    '''
    # TODO: complete function


def gender(city_file, time_period):
    '''TODO: fill out docstring with description, arguments, and return values.
    Question: What are the counts of gender?
    '''
    # TODO: complete function


def birth_years(city_file, time_period):
    '''TODO: fill out docstring with description, arguments, and return values.
    Question: What are the earliest (i.e. oldest user), most recent (i.e. youngest user),
    and most popular birth years?
    '''
    # TODO: complete function


def display_data():
    '''Displays five lines of data if the user specifies that they would like to.
    After displaying five lines, ask the user if they would like to see five more,
    continuing asking until they say stop.

    Args:
        none.
    Returns:
        TODO: fill out return type and description (see get_city for an example)
    '''
    display = input('\nWould you like to view individual trip data?'
                    'Type \'yes\' or \'no\'.\n')
    # TODO: handle raw input and complete function


def statistics():
    '''Calculates and prints out the descriptive statistics about a city and time period
    specified by the user via raw input.

    Args:
        none.
    Returns:
        none.
    '''
    # Filter by city (Chicago, New York, Washington)
    city = get_city()

    # Filter by time period (month, day, none)
    time_period = get_time_period()

    print('Calculating the first statistic...')

    # What is the most popular month for start time?
    if time_period == 'none':
        start_time = time.time()
        
        #TODO: call popular_month function and print the results
        
        print("That took %s seconds." % (time.time() - start_time))
        print("Calculating the next statistic...")

    # What is the most popular day of week (Monday, Tuesday, etc.) for start time?
    if time_period == 'none' or time_period == 'month':
        start_time = time.time()
        
        # TODO: call popular_day function and print the results
        
        print("That took %s seconds." % (time.time() - start_time))
        print("Calculating the next statistic...")    

    start_time = time.time()

    # What is the most popular hour of day for start time?
    # TODO: call popular_hour function and print the results

    print("That took %s seconds." % (time.time() - start_time))
    print("Calculating the next statistic...")
    start_time = time.time()

    # What is the total trip duration and average trip duration?
    # TODO: call trip_duration function and print the results

    print("That took %s seconds." % (time.time() - start_time))
    print("Calculating the next statistic...")
    start_time = time.time()

    # What is the most popular start station and most popular end station?
    # TODO: call popular_stations function and print the results

    print("That took %s seconds." % (time.time() - start_time))
    print("Calculating the next statistic...")
    start_time = time.time()

    # What is the most popular trip?
    # TODO: call popular_trip function and print the results

    print("That took %s seconds." % (time.time() - start_time))
    print("Calculating the next statistic...")
    start_time = time.time()

    # What are the counts of each user type?
    # TODO: call users function and print the results

    print("That took %s seconds." % (time.time() - start_time))
    print("Calculating the next statistic...")
    start_time = time.time()

    # What are the counts of gender?
    # TODO: call gender function and print the results

    print("That took %s seconds." % (time.time() - start_time))
    print("Calculating the next statistic...")
    start_time = time.time()

    # What are the earliest (i.e. oldest user), most recent (i.e. youngest user), and
    # most popular birth years?
    # TODO: call birth_years function and print the results

    print("That took %s seconds." % (time.time() - start_time))

    # Display five lines of data at a time if user specifies that they would like to
    display_data()

    # Restart?
    restart = input('\nWould you like to restart? Type \'yes\' or \'no\'.\n')
    if restart.lower() == 'yes':
        statistics()


if __name__ == "__main__":
	statistics()

import time

import pandas as pd

import numpy as np

CITY_DATA = { 'new york city': 'new_york_city.csv', 'chicago': 'chicago.csv',

'washington': 'washington.csv'}

cities = ['chicago', 'new york city', 'washington']

survey_month = {'january', 'february', 'march', 'april', 'may', 'june', 'all'}

week_data = {'sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'all'}

def get_filters():

"""

Asks user to specify a city, month, and day to analyze.

Returns:

(str) city - name of the city to analyze

(str) month - name of the month to filter by, or "all" to apply no month filter

(str) day - name of the day of week to filter by, or "all" to apply no day filter

"""

print('Hello! Let\'s explore some US bikeshare data!')

# TO DO: get user input for city (chicago, new york city, washington). HINT: Use a while loop to handle invalid inputs

while(True):

city = ['chicago', 'new york city', 'washington']

city = input('What city would you like to review: Chicago, New York City, Washington, or all: ').lower()

if city.lower() in cities:

break

else:

print('Invalid entry, please try again')

# TO DO: get user input for month (all, january, february, ... , june)

while(True):

month = ['january', 'february', 'march', 'april', 'may', 'june']

month = input('Select a month would you like to review: January, February, March, April, May, June, all: ').lower()

if month.lower() in month:

break

else:

print('Invalid entry, please try again')

# TO DO: get user input for day of week (all, monday, tuesday, ... sunday)

while (True):

day = ['sunday', 'monday', 'tuesday' 'wednesday', 'thursday', 'friday', 'saturday']

day = input('Which day would you like to view: Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, all: ').lower()

if day.lower() in day:

break

else:

print('Invalid entry, please try again')

print('-'*40)

return city, month, day

def load_data(city, month, day):

"""

Loads data for the specified city and filters by month and day if applicable.

Args:

(str) city - name of the city to analyze

(str) month - name of the month to filter by, or "all" to apply no month filter

(str) day - name of the day of week to filter by, or "all" to apply no day filter

Returns:

df - Pandas DataFrame containing city data filtered by month and day

"""

# load data frame from city data

df = pd.read_csv(CITY_DATA[city])

# change start time (str) to insert datetime colum

df['Start Time'] = pd.to_datetime(df["Start Time"])

# column

df['month'] = df['Start Time'].dt.month

df['day_of_week'] = df['Start Time'].dt.weekday_name

df['hour'] = df['Start Time'].dt.hour

df['start_end'] = df['Start Station'].astype(str) + ' to ' + df['End Station']

# filter by month, or all

if month != 'all':

month_index = survey_month.index(month) + 1

df = df[df['month'] == month_index]

# filter day, or all

if day != 'all':

#filter for DOW new DF

df = df[df['day_of_week'] == day.title()]

return df

def time_stats(df):

"""Displays statistics on the most frequent times of travel."""

print('\nCalculating The Most Frequent Times of Travel...\n')

start_time = time.time()

# TO DO: display the most common month

month_index = df["month"].mode()[0] - 1

most_common_month = survey_month[month_index].title()

print("Most common month: ", most_common_month)

#TO DO: display the most common day of week

most_common_day = df["day_of_week"].mode()[0]

print("Most common day: ", most_common_day)

# TO DO: display the most common start hour

most_common_hour = df["hour"].mode()[0]

print("Most common hour: ", most_common_hour)

print("\nThis took %s seconds." % (time.time() - start_time))

print('-'*40)

def station_stats(df):

"""Displays statistics on the most popular stations and trip."""

print('\nCalculating The Most Popular Stations and Trip...\n')

start_time = time.time()

# TO DO: display most commonly used start station

common_start_station = df['start station'].mode()[0]

print("most commonly used start station: ", common_start_station)

# TO DO: display most commonly used end station

common_end_station = df['end station'].mode()[0]

print("most commonly use end station: ", common_end_station)

# TO DO: display most frequent combination of start station and end station trip

most_common_combination = df['start_end'].mode()[0]

print("most frequent combination start and end station trip: ",

most_common_combination)

print("\nThis took %s seconds." % (time.time() - start_time))

print('-'*40)

def trip_duration_stats(df):

"""Displays statistics on the total and average trip duration."""

print('\nCalculating Trip Duration...\n')

start_time = time.time()

# TO DO: display total travel time

total_travel_time = df['Trip Duration'].sum()

print("Total trip Duration: ", total_travel_time)

# TO DO: display mean travel time

mean_travel_time = df['Trip Duration'].mean()

print("Mean Travel Time: ", mean_travel_time)

print("\nThis took %s seconds." % (time.time() - start_time))

print('-'*40)

def user_stats(df):

"""Displays statistics on bikeshare users."""

print('\nCalculating User Stats...\n')

start_time = time.time()

# TO DO: Display counts of user types

user_types=df["User Type"].value_counts()

print("Counts of user type:",user_types)

# TO DO: Display counts of gender

if "gender" in df:

print("\nCounts gender")

print("male: ", df.query("gender == 'Male'").gender.count())

print("female: ", df.query("gender == 'Female'").gender.count())

# TO DO: Display earliest, most recent, and most common year of birth

if "birth Year" in df:

print("\nearliest year of birth: ", df["Birth Year"].min())

print("most recent year of birth: ", df["Birth Year"].max())

print("most common year of birth: ", df["Birth Year"].value_counts().idxmax())

print("\nThis took %s seconds." % (time.time() - start_time))

print('-'*40)

def main():

while True:

city, month, day = get_filters()

df=load_data(city, month, day)

time_stats(df)

station_stats(df)

trip_duration_stats(df)

user_stats(df)

restart = input('\nWould you like to restart? Enter yes or no.\n')

if restart.lower() != 'yes':

break

if __name__ == "__main__":

main()
